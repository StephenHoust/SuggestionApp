@page "/Details/{Id}"

@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavManager
@inject IStatusData StatusData
@inject ISuggestionData SuggestionData
@inject IUserData UserData

<h1 class="page-heading text-uppercase mb-4">Suggestion Details</h1>

<div class="row justify-content-center detail-form">
    <div class="col-xl-8 col-lg-10 form-layout">
        @if (_suggestion is not null)
        {
            <div class="row suggestion-detail-row">
                <div class="col-11 suggestion-detail">
                    <div>
                        <div class="@GetVoteClass()" @onclick="VoteUp">
                            <div class="text-uppercase">@GetUpvoteTopText()</div>
                            <span class="oi oi-caret-top detail-upvote"></span>
                            <div class="text-uppercase">@GetUpvoteBottomText()</div>
                        </div>
                        <div class="suggestion-detail-date">
                            <div>@_suggestion.DateCreated.ToString("MM.dd.yyyy")</div>
                        </div>
                    </div>

                    <div class="suggestion-detail-text">
                        <div class="fw-bold mb-2 suggestion-detail-suggestion">@_suggestion.Suggestion</div>
                        <div class="mb-2 suggestion-detail-author">@_suggestion.Author.DisplayName</div>
                        <div class="mb-2 d-none d-md-block">@_suggestion.Description</div>
                        <div class="suggestion-entry-text-category d-none d-md-block">
                            @_suggestion.Category.CategoryName
                        </div>
                    </div>
                </div>

                <div class="col-1 close-button-section">
                    <button class="btn btn-close" @onclick="ClosePage"></button>
                </div>
            </div>
            <div class="row d-block d-md-none">
                <div class="suggestion-detail-text">
                    <div>@_suggestion.Description</div>
                    <div class="suggestion-entry-text-category">@_suggestion.Category.CategoryName</div>
                </div>
            </div>
        }
    </div>
</div>

@if (_suggestion?.SuggestionStatus is not null)
{
    <div class="row justify-content-center detail-form">
        <div class="col-xl-8 col-lg-10 suggestion-results form-layout">
            <div class="@GetStatusClass()"></div>
            <div class="suggestion-detail-status-section">
                <div class="suggestion-detail-status fw-bold mb-2 suggestion-detail-suggestion">
                    @_suggestion.SuggestionStatus.StatusName
                </div>
                <div class="suggestion-detail-owner-notes">
                    @((MarkupString)_suggestion.OwnerNotes)
                </div>
            </div>
        </div>
    </div>
}

@if (_suggestion is not null)
{
    <AuthorizeView Policy="Admin">
        <div class="row justify-content-center detail-form">
            <div class="col-xl-8 col-lg-10 form-layout admin-details">
                <div class="suggestion-detail-status fw-bold suggestion-detail-suggestion">
                    Set Status
                </div>
                @if (string.IsNullOrWhiteSpace(_settingStatus))
                {
                    <div class="admin-set-statuses">
                        <button @onclick="@(() => _settingStatus = "Completed")"
                                class="btn suggestion-entry-text-category btn-archive btn-status-completed">
                            Completed
                        </button>

                        <button @onclick="@(() => _settingStatus = "Watching")"
                                class="btn suggestion-entry-text-category btn-archive btn-status-watching">
                            Watching
                        </button>

                        <button @onclick="@(() => _settingStatus = "Upcoming")"
                                class="btn suggestion-entry-text-category btn-archive btn-status-upcoming">
                            Upcoming
                        </button>

                        <button @onclick="@(() => _settingStatus = "Dismissed")"
                                class="btn suggestion-entry-text-category btn-archive btn-status-dismissed">
                            Dismissed
                        </button>
                    </div>
                }
                else if (_settingStatus == "Completed")
                {
                    <div>
                        <input @bind="_urlText" class="form-control rounded-control" type="text" placeholder="Url" aria-label="Content Url" />
                        <div class="suggestion-entry-bottom">
                            <button class="btn btn-archive-confirm" @onclick="CompleteSetStatus">
                                Confirm
                            </button>
                            <button class="btn btn-archive-reject" @onclick="() => _settingStatus = null">
                                Cancel
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="suggestion-entry-bottom">
                        <button class="btn btn-archive-confirm" @onclick="CompleteSetStatus">
                            Confirm
                        </button>
                        <button class="btn btn-archive-reject" @onclick="() => _settingStatus = null">
                            Cancel
                        </button>
                    </div>
                }
            </div>
        </div>
    </AuthorizeView>
}

@code {

    [Parameter]
    public string Id { get; set; }

    private SuggestionModel _suggestion;
    private UserModel _loggedInUser;

    private List<StatusModel> _statuses;
    private string _settingStatus = "";
    private string _urlText = "";

    protected override async Task OnInitializedAsync()
    {
        _suggestion = await SuggestionData.GetSuggestion(Id);
        _loggedInUser = await AuthProvider.GetUserFromAuth(UserData);
        _statuses = await StatusData.GetAllStatuses();
    }

    private async Task CompleteSetStatus()
    {
        switch (_settingStatus)
        {
            case "Completed":
                if (string.IsNullOrWhiteSpace(_urlText)) return;

                _suggestion.SuggestionStatus = _statuses.First(s =>
                    string.Equals(s.StatusName, _settingStatus, StringComparison.CurrentCultureIgnoreCase));
                _suggestion.OwnerNotes = $"You are right, this is an important topic for developers. We created a resource about it here: <a href='{_urlText} target='_blank'>{_urlText}</a>";
                break;

            case "Watching":
                _suggestion.SuggestionStatus = _statuses.First(s =>
                    string.Equals(s.StatusName, _settingStatus, StringComparison.CurrentCultureIgnoreCase));
                _suggestion.OwnerNotes = "We noticed the interest this suggestion is getting! If more people are interested we may address this topic in an upcoming resource.";
                break;

            case "Upcoming":
                _suggestion.SuggestionStatus = _statuses.First(s =>
                    string.Equals(s.StatusName, _settingStatus, StringComparison.CurrentCultureIgnoreCase));
                _suggestion.OwnerNotes = "Great suggestion! We have a resource in the pipeline to address this topic.";
                break;

            case "Dismissed":
                _suggestion.SuggestionStatus = _statuses.First(s =>
                    string.Equals(s.StatusName, _settingStatus, StringComparison.CurrentCultureIgnoreCase));
                _suggestion.OwnerNotes = "Sometimes a good idea doesn't fit within our scope and vision. This is one of those ideas.";
                break;

            default:
                return;
        }

        _settingStatus = null;
        await SuggestionData.UpdateSuggestion(_suggestion);
    }

    private void ClosePage()
    {
        NavManager.NavigateTo("/");
    }

    private string GetUpvoteTopText()
    {
        if (_suggestion.UserVotes?.Count > 0)
            return _suggestion.UserVotes.Count.ToString("00");
        else if (_suggestion.Author.Id == _loggedInUser?.Id)
            return "Awaiting";
        else
            return "Click To";
    }

    private string GetUpvoteBottomText()
    {
        return _suggestion.UserVotes?.Count > 1 ? "Upvotes" : "Upvote";
    }

    private async Task VoteUp()
    {
        if (_loggedInUser is not null)
        {
            if (_suggestion.Author.Id == _loggedInUser.Id)
            {
    // Can't vote on your own suggestion
                return;
            }

            if (_suggestion.UserVotes.Add(_loggedInUser.Id) == false)
                _suggestion.UserVotes.Remove(_loggedInUser.Id);

            await SuggestionData.UpvoteSuggestion(_suggestion.Id, _loggedInUser.Id);
        }
        else
        {
            NavManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }

    private string GetVoteClass()
    {
        if (_suggestion.UserVotes is null || _suggestion.UserVotes.Count == 0)
            return "suggestion-detail-no-votes";

        return _suggestion.UserVotes.Contains(_loggedInUser?.Id) ? "suggestion-detail-voted" : "suggestion-detail-not-voted";
    }

    private string GetStatusClass()
    {
        if (_suggestion?.SuggestionStatus is null)
        {
            return "suggestion-detail-status-none";
        }

        var output = _suggestion.SuggestionStatus.StatusName switch
        {
            "Completed" => "suggestion-detail-status-completed",
            "Watching" => "suggestion-detail-status-watching",
            "Upcoming" => "suggestion-detail-status-upcoming",
            "Dismissed" => "suggestion-detail-status-dismissed",
            _ => "suggestion-detail-status-none"
            };

        return output;
    }

}