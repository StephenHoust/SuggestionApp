@page "/Profile"
@attribute [Authorize]

@inject AuthenticationStateProvider AuthProvider
@inject ISuggestionData SuggestionData
@inject IUserData UserData
@inject NavigationManager NavManager

<h1>My Profile</h1>

<div>
    <div>
        <button @onclick="ClosePage"></button>
    </div>
</div>

<div>
    <h2>My Account</h2>
    <p>
        <a href="MicrosoftIdentity/Account/EditProfile">
            Edit My Profile
        </a>
    </p>
</div>

@if (_approved?.Count > 0)
{
    <div>
        <h2>Approved Suggestions</h2>
        <p>These are your suggestions that are currently active.</p>
        
        @foreach (var s in _approved)
        {
            <hr />
            <div>
                @s.Suggestion
            </div>
            <p>
                @s.DateCreated.ToString("MM.dd.yyyy")
            </p>
            <p>
                Total Votes: @s.UserVotes.Count
            </p>
            <p>
                @s.Category.CategoryName
            </p>
            <p>
                @s.Description
            </p>
            @if (s.SuggestionStatus is not null)
            {
                <div>
                    @s.SuggestionStatus.StatusName
                </div>
                <p>
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }
    </div>
}

@if (_archived?.Count > 0)
{
    <div>
        <h2>Archived Suggestions</h2>
        <p>These are your suggestions that were active, but did not gain enough traction.</p>
        
        @foreach (var s in _archived)
        {
            <hr />
            <div>
                @s.Suggestion
            </div>
            <p>
                @s.DateCreated.ToString("MM.dd.yyyy")
            </p>
            <p>
                Total Votes: @s.UserVotes.Count
            </p>
            <p>
                @s.Category.CategoryName
            </p>
            <p>
                @s.Description
            </p>
            @if (s.SuggestionStatus is not null)
            {
                <div>
                    @s.SuggestionStatus.StatusName
                </div>
                <p>
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }
    </div>
}

@if (_pending?.Count > 0)
{
    <div>
        <h2>Pending Suggestions</h2>
        <p>These are your suggestions that have not yet been reviewed by the administrators.</p>
        
        @foreach (var s in _pending)
        {
            <hr />
            <div>
                @s.Suggestion
            </div>
            <p>
                @s.DateCreated.ToString("MM.dd.yyyy")
            </p>
            <p>
                Total Votes: @s.UserVotes.Count
            </p>
            <p>
                @s.Category.CategoryName
            </p>
            <p>
                @s.Description
            </p>
            @if (s.SuggestionStatus is not null)
            {
                <div>
                    @s.SuggestionStatus.StatusName
                </div>
                <p>
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }
    </div>
}

@if (_rejected?.Count > 0)
{
    <div>
        <h2>Rejected Suggestions</h2>
        <p>These are your suggestions that were not deemed to be appropriate for the training suggestion site.</p>
        
        @foreach (var s in _rejected)
        {
            <hr />
            <div>
                @s.Suggestion
            </div>
            <p>
                @s.DateCreated.ToString("MM.dd.yyyy")
            </p>
            <p>
                Total Votes: @s.UserVotes.Count
            </p>
            <p>
                @s.Category.CategoryName
            </p>
            <p>
                @s.Description
            </p>
            @if (s.SuggestionStatus is not null)
            {
                <div>
                    @s.SuggestionStatus.StatusName
                </div>
                <p>
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }
    </div>
}

@code {
    private UserModel _loggedInUser;
    private List<SuggestionModel> _submissions;
    private List<SuggestionModel> _approved;
    private List<SuggestionModel> _archived;
    private List<SuggestionModel> _pending;
    private List<SuggestionModel> _rejected;

    protected override async Task OnInitializedAsync()
    {
        _loggedInUser = await AuthProvider.GetUserFromAuth(UserData);

        var results = await SuggestionData.GetUserSuggestions(_loggedInUser.Id);

        if (results is not null)
        {
            _submissions = results.OrderByDescending(s => s.DateCreated).ToList();
            _approved = _submissions.Where(s => s.ApprovedForRelease &&
                                                s.Archived == false &&
                                                s.Rejected == false).ToList();
            _archived = _submissions.Where(s => s.Archived && s.Rejected == false).ToList();
            _pending = _submissions.Where(s => s.ApprovedForRelease == false && s.Rejected == false).ToList();
            _rejected = _submissions.Where(s => s.Rejected).ToList();
        }
    }

    private void ClosePage()
    {
        NavManager.NavigateTo("/");
    }

}